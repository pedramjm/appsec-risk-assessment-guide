Config	14.1.1	Verify that the application build and deployment processes are performed in a secure and repeatable way, such as CI / CD automation, automated configuration management, and automated deployment scripts.
Config	14.1.2	Verify that compiler flags are configured to enable all available buffer overflow protections and warnings, including stack randomization, data execution prevention, and to break the build if an unsafe pointer, memory, format string, integer, or string operations are found.
Config	14.1.3	Verify that server configuration is hardened as per the recommendations of the application server and frameworks in use.
Config	14.1.4	Verify that the application, configuration, and all dependencies can be re-deployed using automated deployment scripts, built from a documented and tested runbook in a reasonable time, or restored from backups in a timely fashion.
Config	14.1.5	Verify that authorized administrators can verify the integrity of all security-relevant configurations to detect tampering.
Config	14.2.1	Verify that all components are up to date, preferably using a dependency checker during build or compile time. 
Config	14.2.2	Verify that all unneeded features, documentation, samples, configurations are removed, such as sample applications, platform documentation, and default or example users.
Config	14.2.3	Verify that if application assets, such as JavaScript libraries, CSS stylesheets or web fonts, are hosted externally on a content delivery network  or external provider, Subresource Integrity  is used to validate the integrity of the asset.
Config	14.2.4	Verify that third party components come from pre-defined, trusted and continually maintained repositories. 
Config	14.2.5	Verify that an inventory catalog is maintained of all third party libraries in use. 
Config	14.2.6	Verify that the attack surface is reduced by sandboxing or encapsulating third party libraries to expose only the required behaviour into the application. 
Config	14.3.1	Verify that web or application server and framework error messages are configured to deliver user actionable, customized responses to eliminate any unintended security disclosures.
Config	14.3.2	Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures.
Config	14.3.3	Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.
Config	14.4.1	Verify that every HTTP response contains a content type header specifying a safe character set .
Config	14.4.2	Verify that all API responses contain Content-Disposition: attachment; filename="api.json" .
Config	14.4.3	Verify that a content security policy  is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.
Config	14.4.4	Verify that all responses contain X-Content-Type-Options: nosniff.
Config	14.4.5	Verify that HTTP Strict Transport Security headers are included on all responses and for all subdomains, such as Strict-Transport-Security: max-age=15724800; includeSubdomains.
Config	14.4.6	Verify that a suitable "Referrer-Policy" header is included, such as "no-referrer" or "same-origin".
Config	14.4.7	Verify that a suitable X-Frame-Options or Content-Security-Policy: frame-ancestors header is in use for sites where content should not be embedded in a third-party site.
Config	14.5.1	Verify that the application server only accepts the HTTP methods in use by the application or API, including pre-flight OPTIONS.
Config	14.5.2	Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker.
Config	14.5.3	Verify that the cross-domain resource sharing  Access-Control-Allow-Origin header uses a strict white-list of trusted domains to match against and does not support the "null" origin.
Config	14.5.4	Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application.



--------------------------------------


This includes the following:

14.1 Build and deployment processes (automation)
14.2 Server config hardening
14.3 Unintended security disclosure (logging and error message output)

14.4 Dependency checking
- Up to date
- Contain no vulnerabilities
- Trusted source

14.5 Remove unnecessary items
- services
- ports
- code
- scripts

