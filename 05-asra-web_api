V13	API	13.1.1	Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.
V13	API	13.1.2	Verify that access to administration and management functions is limited to authorized administrators.
V13	API	13.1.3	Verify API URLs do not expose sensitive information, such as the API key, session tokens etc.
V13	API	13.1.4	Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions.
V13	API	13.1.5	Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type).
V13	API	13.2.1	Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources.
V13	API	13.2.2	Verify that JSON schema validation is in place and verified before accepting input.
V13	API	13.2.3	Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: triple or double submit cookie pattern (see [references](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)), CSRF nonces, or ORIGIN request header checks.
V13	API	13.2.4	Verify that REST services have anti-automation controls to protect against excessive calls, especially if the API is unauthenticated.
V13	API	13.2.5	Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/JSON.
V13	API	13.2.6	Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits.
V13	API	13.3.1	Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place.
V13	API	13.3.2	Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service.
V13	API	13.4.1	Verify that query whitelisting or a combination of depth limiting and amount limiting should be used to prevent GraphQL or data layer expression denial of service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used.
V13	API	13.4.2	Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer.


---

This includes the following:

5.1 General Web service security
- HTTP GET/POST requests
- URI construction and content type handling
- HTTP Methods allowed
- HTTP Request handling
  - specific response types such as 406 Unacceptable, 404 File not Found

5.2 Secure Cookies

5.3 Security headers

5.4 Other public facing endpoints
- API security
- RESTful services
- SOAP services
- GraphQL and other data layer services

5.5 Encoding (XML, JSON etc.)

5.6 TLS



Note: please take into account that Web (and API) functionality generally must consider other security domains listed within this form i.e. authentication, authorization and access control. See OWASP lists below as 


Consider the OWASP Web Application Top 10 vulnerabilities:

- Injection
- Broken Authentication
- Sensitive Data Exposure
- XML External Entities (XXE)
- Broken Access control
- Security misconfigurations
- Cross Site Scripting (XSS)
- Insecure Deserialization
- Using Components with known vulnerabilities
- Insufficient logging and monitoring


and the OWASP API Security Top 10:

— Broken object level authorization
— Broken authentication
— Excessive data exposure
— Lack of resources and rate limiting
— Broken function level authorization
— Mass assignment
— Security misconfiguration
— Injection
— Improper assets management
— Insufficient logging and monitoring


---



- API URLs and endpoints
- GQL Endpoints
- Content type handling

- Encoding i.e. XML, JSON, GQL, Base64 etc.

- Cookie handling

- Verification of schema i.e. WSL, XML

- TLS used

- XML, JSON
